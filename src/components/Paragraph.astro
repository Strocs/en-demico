---
import type { HTMLTag } from "astro/types";

interface Props {
  text: string;
  class?: string;
  decorator?: HTMLTag;
  length?: number;
  wordsLength?: number;
}

const {
  text,
  class: customStyle,
  decorator: Element,
  length,
  wordsLength,
} = Astro.props;

const trimmedText =
  !!length && length < text.length ? `${text.substring(0, length)}...` : text;

const textToArray = text.trim().split(" ");

const resumedText =
  !!wordsLength && wordsLength < textToArray.length - 1
    ? `${textToArray.slice(0, wordsLength).join(" ")}...`
    : text;

const textSplited = resumedText.split("\n");
---

{
  textSplited.map((text: string) => {
    const textBoldSplitted = text.split("\b");

    return (
      <p class:list={[customStyle]}>
        {textBoldSplitted.map((text, index) => {
          if (index % 2 === 0) {
            return !!Element ? <Element>{text}</Element> : text;
          }
          return <strong>{text}</strong>;
        })}
      </p>
    );
  })
}

<style>
  .quotes::before,
  .quotes::after {
    content: '"';
  }
</style>
